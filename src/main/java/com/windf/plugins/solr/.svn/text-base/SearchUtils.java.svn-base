package com.whaty.plugins.solr;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrQuery.ORDER;
import org.apache.solr.client.solrj.SolrQuery.SortClause;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.CloudSolrClient;
import org.apache.solr.client.solrj.impl.HttpSolrClient;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.apache.solr.common.SolrInputDocument;

import com.whaty.plugins.solr.util.Page;

/**
 * 搜索工具类
 * 
 * @author huze
 *
 */
public class SearchUtils {

	Logger logger = Logger.getLogger(SearchUtils.class);

	private String zkNodes = null;
	private String collectionName = null;
	private String solrUrl = null;


	/**
	 * 添加索引
	 * 
	 * @param map
	 * @return
	 */
	public Boolean addDocument(Map<String, Object> map) {
		Boolean success = false;
		if (null == map || map.size() == 0) {
			return success;
		}
		try {
			SolrClient client = getClient();
			doAddDocument(client, map);
			client.commit();
			close(client);
		} catch (SolrServerException e) {
			logger.error("Failed to add index.", e);
		} catch (IOException e) {
			logger.error("Failed to add index.", e);
		}
		return success;
	}
	
	/**
	 * 删除索引
	 * 
	 * @param ids
	 * @return
	 */
	public Boolean deleteByIds(List<String> ids) {
		Boolean resultValue = false;
		try {
			SolrClient client = getClient();
			client.deleteById(ids);
			resultValue = true;
			client.commit();
			close(client);
		} catch (SolrServerException e) {
			logger.error("Failed to add index.", e);
		} catch (IOException e) {
			logger.error("Failed to add index.", e);
		}
		return resultValue;
	}

	/**
	 * 清楚所有索引
	 * @return
	 */
	public Boolean deleteAll() {
		Boolean resultValue = false;
		try {
			SolrClient client = getClient();
			client.deleteByQuery("content:*");
			resultValue = true;
			client.commit();
			close(client);
		} catch (SolrServerException e) {
			logger.error("Failed to add index.", e);
		} catch (IOException e) {
			logger.error("Failed to add index.", e);
		}
		return resultValue;
	}

	/**
	 * 添加Document的封装方法
	 * 
	 * @param client
	 * @param map
	 */
	private void doAddDocument(SolrClient client, Map<String, Object> map) {
		if (null == map || map.size() == 0) {
			return;
		}
		SolrInputDocument doc = new SolrInputDocument();
		for (Entry<String, Object> entry : map.entrySet()) {
			if (entry.getValue() instanceof String) {
				doc.addField(entry.getKey(), TextUtils.filterHtml(entry.getValue().toString()));
			} else {
				doc.addField(entry.getKey(), entry.getValue());
			}
		}
		try {
			client.add(doc);
		} catch (Throwable e) {
			e.printStackTrace();
			logger.error("Failed to add index.", e);
		}
	}
	

	/**
	 * 按照关键字获取搜索结果
	 * @param platform
	 * @param resourceType
	 * @param keyword
	 * @param condition
	 * @param pageSize 页大小
	 * @param pageIndex 页码（从0开始）
	 * @return
	 */
	public Page<Map<String, Object>> searchByKeyword(String platform, String type, String keyword, 
			Map<String, String> condition, Map<String, String> orders, Integer pageSize, Integer pageIndex) {
		
		if (pageSize == null) {
			pageIndex = 0;
		} else {
			pageIndex = pageIndex - 1;
		}
		
		Page<Map<String, Object>> results = new Page<Map<String, Object>>();
		List<Map<String, Object>> searchResults = new ArrayList<Map<String, Object>>();
		try {
			SolrClient client = getClient();

			StringBuilder queryStr = new StringBuilder();
			if (StringUtils.isNotBlank(keyword)) {
				queryStr.append("content:" + keyword + "");
			} else {
				queryStr.append("*:*");
			}
			if (null != platform && platform.length() > 0) {
				queryStr.append(" AND id:" + platform + "_*");
			}
			if (null != type && type.length() > 0) {
				queryStr.append(" AND type:" + type + "");
			}
			
			if (condition != null) {
				Iterator<String> iterator = condition.keySet().iterator();
				while (iterator.hasNext()) {
					String key = iterator.next();
					String value = condition.get(key);
					
					if (StringUtils.isNotBlank(key) && StringUtils.isNotBlank(value)) {
						if (key.contains("__")) {
							String[] keys = key.split("__");
							queryStr.append(" AND (");
							for (int i = 0; i < keys.length; i++) {
								if (i != 0) {
									queryStr.append(" OR ");
								}
								queryStr.append(keys[i] + ":" + value + "");
							}
							queryStr.append(")");
						} else {
							queryStr.append(" AND " + key + ":" + value + "");
						}
					}
				}
				
			}

			List<SortClause> sortClauses = new ArrayList<SortClause>();
			if (orders != null) {
				Iterator<String> iterator = orders.keySet().iterator();
				while (iterator.hasNext()) {
					String key = iterator.next();
					String value = orders.get(key);
					
					SortClause s = new SortClause(key, ORDER.valueOf(value));
					sortClauses.add(s);
				}
			}
			
			SolrQuery query = new SolrQuery();
			query.setQuery(queryStr.toString());
			query.setRows(pageSize);
			query.setStart(pageIndex * pageSize);
			query.setSorts(sortClauses);
			QueryResponse response = client.query(query);
			SolrDocumentList docs = response.getResults();
			results.setTotal(docs.getNumFound());
			for (SolrDocument solrDocument : docs) {
					searchResults.add(solrDocument.getFieldValueMap());
			}
			close(client);
		} catch (SolrServerException e) {
			logger.error("Failed to add index.", e);
		} catch (IOException e) {
			logger.error("Failed to add index.", e);
		}
		results.setResults(searchResults);
		results.setPageIndex(pageIndex);
		results.setPageSize(pageSize);
		return results;
	}

	/**
	 * 批量添加索引
	 * 
	 * @param map
	 * @return
	 */
	public Boolean addDocuments(List<Map<String, Object>> maps) {
		Boolean success = false;
		if (null == maps || maps.size() == 0) {
			return success;
		}
		try {
			SolrClient client = getClient();
			for (Map<String, Object> map : maps) {
				doAddDocument(client, map);
			}
			client.commit();
			close(client);
		} catch (SolrServerException e) {
			logger.error("Failed to add index.", e);
		} catch (IOException e) {
			logger.error("Failed to add index.", e);
		}
		return success;
	}
	

	/**
	 * 获得solr连接，如果没有
	 * @return
	 */
	protected SolrClient getClient() {
		if ((StringUtils.isEmpty(zkNodes) || StringUtils.isEmpty(collectionName)) && StringUtils.isEmpty(solrUrl)) {
			throw new RuntimeException("Failed to initial the CloudSolrClient or SolrClient");
		}

		SolrClient client = null;
		if (StringUtils.isNotEmpty(solrUrl)) {
			client = new HttpSolrClient(solrUrl);
		} else {
			CloudSolrClient cloudSolrClient = new CloudSolrClient(zkNodes);
			cloudSolrClient.setDefaultCollection(collectionName);
			client = cloudSolrClient;
		}

		return client;
	}

	/**
	 * 销毁连接
	 */
	protected void close(SolrClient client) {
		if (null != client) {
			try {
				client.close();
			} catch (IOException e) {
				logger.error("close SolrClient failed", e);
			}
		}
	}

	public String getZkNodes() {
		return zkNodes;
	}

	public void setZkNodes(String zkNodes) {
		this.zkNodes = zkNodes;
	}

	public String getCollectionName() {
		return collectionName;
	}

	public void setCollectionName(String collectionName) {
		this.collectionName = collectionName;
	}

	public String getSolrUrl() {
		return solrUrl;
	}

	public void setSolrUrl(String solrUrl) {
		this.solrUrl = solrUrl;
	}
}
